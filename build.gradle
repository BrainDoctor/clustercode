plugins {
    id "java"
    id "idea"
    id 'com.github.johnrengelman.shadow' version '2.0.4'
}

group "clustercode"
version "1.4.0"
/*
sourceCompatibility = 1.8
targetCompatibility = 1.8
*/

repositories {
    mavenCentral()
}

ext {
    guiceVersion = "4.1.0"
    log4jVersion = "2.8.+"
    jacksonVersion = "2.9.+"
    dep_owner = "org.aeonbits.owner:owner:1.0.10"
    dep_rxjava = "io.reactivex.rxjava2:rxjava:2.1.+"
    dep_jgroups = "org.jgroups:jgroups:4.0.+"
    dep_inject = "javax.inject:javax.inject:1"
    dep_guice = "com.google.inject.extensions:guice-multibindings:${guiceVersion}"

    proj_test_util = "clustercode.test.util"
    proj_api_transcode = "clustercode.api.transcode"
    proj_api_cluster = "clustercode.api.cluster"
    proj_api_config = "clustercode.api.config"
    proj_api_domain = "clustercode.api.domain"
    proj_api_scan = "clustercode.api.scan"
    proj_api_process = "clustercode.api.process"
    proj_api_event = "clustercode.api.event"
    proj_api_cleanup = "clustercode.api.cleanup"
    proj_api_rest = "clustercode.api.rest.v1"
    proj_impl_util = "clustercode.impl.util"
    proj_impl_scan = "clustercode.impl.scan"
    proj_impl_transcode = "clustercode.impl.transcode"
    proj_impl_cluster_jgroups = "clustercode.impl.cluster.jgroups"
    proj_impl_process = "clustercode.impl.process"
    proj_impl_cleanup = "clustercode.impl.cleanup"
    proj_impl_constraint = "clustercode.impl.constraint"
    proj_main = "clustercode.main"
}

allprojects {
    idea {
        module {
            inheritOutputDirs = false
            outputDir = compileJava.destinationDir
            testOutputDir = compileTestJava.destinationDir
        }
    }
}

subprojects {
    group = 'clustercode'
    version = '1.0'

    targetCompatibility = 1.8
    sourceCompatibility = 1.8

    apply plugin: "java"

    repositories {
        mavenCentral()
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }

    dependencies {
        compileOnly "org.projectlombok:lombok:1.16.+"

        // logging
        compile "org.slf4j:slf4j-ext:1.7.+"
        runtime "org.apache.logging.log4j:log4j-api:${log4jVersion}"
        runtime "org.apache.logging.log4j:log4j-core:${log4jVersion}"
        runtime "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"

        // testing
        testRuntime "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"
        testCompile "junit:junit:4.12"
        testCompile "org.mockito:mockito-all:2.0.+"
        testCompile "com.google.jimfs:jimfs:1.+"
        testCompile "org.assertj:assertj-core:3.8.0"

        //testCompile project(":clustercode.test.util").sourceSets.test.output
    }

    test {
        systemProperty 'log4j.configurationFile', '../clustercode.main/src/test/resources/log4j2-debug.xml'
    }

}

dependencies{
    compile project(":${proj_main}")
}


shadowJar {
    dependencies {
        exclude(project(":${proj_test_util}"))
    }
    manifest {
        attributes "Main-Class": "clustercode.main.Startup", "Implementation-Version": version
    }
    baseName = "clustercode"
    classifier = null
    version = null
}

task fullBuild(type: Jar) {
    manifest {
        attributes "Main-Class": "clustercode.main.Startup",
            "Implementation-Title": project.name
    }
    archiveName = "clustercode.jar"
    baseName = project.name
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    from { configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task downloadDependenciesCustom(type: Exec) {
    configurations.testRuntime.files
    //commandLine "echo", "Downloaded all dependencies"
    commandLine "print", "Downloaded all dependencies"
}

task windowsZip(type: Zip) {
    from("${project.buildDir}/libs/${fullBuild.archiveName}") { into "clustercode" }
    from("src/assembly/clustercode/resources") { into "clustercode" }
    from("src/assembly/clustercode/windows") { into "clustercode" }
    from("dist") { into "clustercode/clustercode-admin" }
    from("src/assembly/clustercode-admin/windows") { into "clustercode" }
    from("src/assembly/clustercode-admin/nginx") { into "clustercode/nginx/conf" }
    from("build/swagger") { into "clustercode/clustercode-admin/static" }
    classifier "win"
}

task resolveDependencies {
    doLast {
        project.rootProject.allprojects.each { subProject ->
            subProject.buildscript.configurations.each { configuration ->
                if (configuration.isCanBeResolved()) configuration.resolve()
            }
            subProject.configurations.each { configuration ->
                if (configuration.isCanBeResolved()) configuration.resolve()
            }
        }
    }
}

task githubRelease()

fullBuild.dependsOn test

windowsZip.dependsOn fullBuild
//windowsZip.dependsOn generateSwaggerDocumentation

//check.dependsOn integrationTest
//integrationTest.mustRunAfter test

githubRelease.dependsOn windowsZip

/*jacoco {
    reportsDir file("${project.buildDir}/reports/jacoco")
    toolVersion "0.7.6.201602180812"
}*/

